[
  {
    "objectID": "ST558_HW3.html",
    "href": "ST558_HW3.html",
    "title": "ST558_HW3_Importing_Data",
    "section": "",
    "text": "From the R Console, we use the getwd() and setwd() commands to get and set the working directory, respectively. Setting a working directory of a different folder/object with the same root path as the current directory is accomplished with:\n‘setwd(“../MyData.csv”)’\nFrom the Terminal, commands of simply ‘cd ..’ will change the directory to a level higher. ‘cd ./DIRECTORY’ would move the active directory to a location within the current directory.\n\n\n\nR projects establish a self-contained organizational location. This helps sharing configuration between different parties as all folder or file references can be local.\n\n\n\nGit is a version control and history software which retains all versions of code and allows for review/comparison of updates to code. Git can therefore be used to collaborate as well. Several different entities may develop on a main branch of code while enabling review by all parties prior to commmitting updates. Github is a website or front-end environment for git, including visualization of code projects (“Repos”), and their associated components (branches, descriptive files, etc.)\n\n\n\nA tibble’s print results are more organized and display only the top rows/columns. Also, as stated in the notes - they do not coerce down to a vector when you subset to only one column using [\n\n\n\n\nlibrary(dplyr, )\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species),\n               Petal.Length &lt; 1.55), Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\n\nas_tibble(iris) |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(by_group = Species) |&gt;\n  collect()\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\n\n\n\nWide format data is generally used more often for presentation and includes multiple observations in one row. Long format limits the data table to one row per observation. While wide format may be easier to consume visually, statistical analysis is more easily performed on long format because it requires less manipulation of data to separate observations."
  },
  {
    "objectID": "ST558_HW3.html#task-1---conceptual-questions",
    "href": "ST558_HW3.html#task-1---conceptual-questions",
    "title": "ST558_HW3_Importing_Data",
    "section": "",
    "text": "From the R Console, we use the getwd() and setwd() commands to get and set the working directory, respectively. Setting a working directory of a different folder/object with the same root path as the current directory is accomplished with:\n‘setwd(“../MyData.csv”)’\nFrom the Terminal, commands of simply ‘cd ..’ will change the directory to a level higher. ‘cd ./DIRECTORY’ would move the active directory to a location within the current directory.\n\n\n\nR projects establish a self-contained organizational location. This helps sharing configuration between different parties as all folder or file references can be local.\n\n\n\nGit is a version control and history software which retains all versions of code and allows for review/comparison of updates to code. Git can therefore be used to collaborate as well. Several different entities may develop on a main branch of code while enabling review by all parties prior to commmitting updates. Github is a website or front-end environment for git, including visualization of code projects (“Repos”), and their associated components (branches, descriptive files, etc.)\n\n\n\nA tibble’s print results are more organized and display only the top rows/columns. Also, as stated in the notes - they do not coerce down to a vector when you subset to only one column using [\n\n\n\n\nlibrary(dplyr, )\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species),\n               Petal.Length &lt; 1.55), Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\n\nas_tibble(iris) |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(by_group = Species) |&gt;\n  collect()\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\n\n\n\nWide format data is generally used more often for presentation and includes multiple observations in one row. Long format limits the data table to one row per observation. While wide format may be easier to consume visually, statistical analysis is more easily performed on long format because it requires less manipulation of data to separate observations."
  },
  {
    "objectID": "ST558_HW3.html#task-2---reading-delimited-data",
    "href": "ST558_HW3.html#task-2---reading-delimited-data",
    "title": "ST558_HW3_Importing_Data",
    "section": "Task 2 - Reading Delimited Data",
    "text": "Task 2 - Reading Delimited Data\n\nTask 2.1 - Glass Data\nFirst, need to activate the necessary packages for this session.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readr)\n\nRead-in data using the ‘readr’ package from tidyverse.\n\n#reading in data\nglass_data &lt;- read_csv(\n  \"./glass.data\",\n  col_names = c(\"ID\",\"RI\", \"Na\", \"Mg\", \"Al\", \"Si\",\n                \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type_of_glass\"),\n  show_col_types = TRUE)\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): ID, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_data\n\n# A tibble: 214 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\nNow update “Type_of_glass” variable to be a string with descriptive values in place of values of 1-7.\n\nglass_data |&gt;\n  mutate(\n    Type_of_glass = ifelse(\n      Type_of_glass == 1,\"building_windows_float_processed\",\n        ifelse(\n          Type_of_glass == 2, \"building_windows_non_float_processed\",\n            ifelse(\n              Type_of_glass == 3, \"vehicle_windows_float_processed\",\n                ifelse(\n                  Type_of_glass == 4,\n                    \"vehicle_windows_non_float_processed\",\n                    ifelse(\n                      Type_of_glass == 5, \"containers\",\n                        ifelse(\n                          Type_of_glass == 6, \"tableware\",\n                            ifelse(\n                              Type_of_glass == 7, \"headlamps\", \"ERROR\")\n                            )\n                        )\n                    )\n                )\n            )\n          )\n      )\n\n# A tibble: 214 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass    \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26 building_windows…\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n# ℹ 204 more rows\n\n\nThe preceding chain only updated the ‘Type_of_glass’ values, but the chain can be extended to include filtering and selection.\n\nglass_data |&gt;\n  mutate(\n    Type_of_glass = ifelse(\n      Type_of_glass == 1,\"building_windows_float_processed\",\n        ifelse(\n          Type_of_glass == 2, \"building_windows_non_float_processed\",\n            ifelse(\n              Type_of_glass == 3, \"vehicle_windows_float_processed\",\n                ifelse(\n                  Type_of_glass == 4,\n                    \"vehicle_windows_non_float_processed\",\n                    ifelse(\n                      Type_of_glass == 5, \"containers\",\n                        ifelse(\n                          Type_of_glass == 6, \"tableware\",\n                            ifelse(\n                              Type_of_glass == 7, \"headlamps\", \"ERROR\")\n                            )\n                        )\n                    )\n                )\n            )\n          )\n      ) |&gt;\n  filter(\n    Fe &lt; 0.2,\n    Type_of_glass == \"tableware\" | Type_of_glass == \"headlamps\")\n\n# A tibble: 38 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows\n\n\n\n\nTask 2.2 - Yeast Data\nPull in the yeast data\n\nyeast_data &lt;- read_fwf(\n  \"./yeast.data\",\n  col_positions = fwf_widths(c(12, 6, 6, 6, 6, 6, 6, 6, 6, 3),\n                             c(\"seq_name\",\"mcg\", \"gvh\", \"alm\", \"mit\",\n                               \"erl\", \"pox\", \"vac\", \"nuc\", \"class\")),\n  show_col_types = TRUE)\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\n\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nyeast_data\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\nStart a chain removing the ‘seq_name’ and ‘nuc’ columns.\n\nyeast_data |&gt;\n  select(-seq_name & -nuc)\n\n# A tibble: 1,484 × 8\n     mcg   gvh   alm   mit   erl   pox   vac class\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT  \n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT  \n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT  \n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC  \n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT  \n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT  \n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT  \n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC  \n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT  \n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT  \n# ℹ 1,474 more rows\n\n\nContinue the chain to determine mean and median for all numeric variables, grouped by ‘class’.\n\nyeast_data |&gt;\n  select(-seq_name & -nuc) |&gt;\n  group_by(class) |&gt;\n  mutate(across(where(is.numeric), list(mean = mean, median = median), .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,484 × 22\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.533\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.533\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.533\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452       0.45    0.456\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.533\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481       0.48    0.470\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.533\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452       0.45    0.456\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.533\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481       0.48    0.470\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;\n\n\n\n\nTask 2.3 - Combining Excel and Delimited Data\nRead in data from the white wine excel spreadsheet. First activate the ‘readxl’ package for this session.\n\nlibrary(\"readxl\")\n\nThen, read in the excel sheet from the RProject session folder via the ‘readxl’ package.\n\nwhite_wine &lt;- read_excel(\n  \"./white-wine.xlsx\",\n  sheet = \"white-wine\",\n  col_names = TRUE\n)\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nRename the column names (i.e. remove spaces) by using the variables names from the second excel sheet.\n\nww_col_names &lt;- data.frame(\n  read_excel(\n    \"./white-wine.xlsx\",\n    sheet = \"variables\",\n    col_names = TRUE\n  )\n)\nww_col_names\n\n              Variables\n1         fixed_acidity\n2      volatile_acidity\n3           citric_acid\n4        residual_sugar\n5             chlorides\n6   free_sulfur_dioxide\n7  total_sulfur_dioxide\n8               density\n9                    pH\n10            sulphates\n11              alcohol\n12              quality\n\n\nOverwrite the existing column names with the ‘ww_col_names’ tibble from the excel sheet.\n\ncolnames(white_wine) &lt;- ww_col_names[[1]]\nwhite_wine\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nAdd a column indicating that these observations are associated with white wines.\n\nmut_white_wine &lt;- white_wine |&gt;\n  mutate(wine_type = \"white\")\nmut_white_wine\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\nPull in the red wine data by using readr package. First enable the package.\n\nlibrary(readr)\n\nThen pull in the data from a .csv file.\n\nred_wine &lt;- read_delim(\n  \"./red-wine.csv\",\n  delim = \";\",\n  show_col_types = TRUE\n)\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nred_wine\n\n# A tibble: 1,599 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1             7.4               0.7           0                 1.9     0.076\n 2             7.8               0.88          0                 2.6     0.098\n 3             7.8               0.76          0.04              2.3     0.092\n 4            11.2               0.28          0.56              1.9     0.075\n 5             7.4               0.7           0                 1.9     0.076\n 6             7.4               0.66          0                 1.8     0.075\n 7             7.9               0.6           0.06              1.6     0.069\n 8             7.3               0.65          0                 1.2     0.065\n 9             7.8               0.58          0.02              2       0.073\n10             7.5               0.5           0.36              6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nUpdate the column names to be the same as those for the white wines.\n\ncolnames(red_wine) &lt;- ww_col_names[[1]]\nred_wine\n\n# A tibble: 1,599 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nAdd a column indicating that these observations are associated with white wines.\n\nmut_red_wine &lt;- red_wine |&gt;\n  mutate(wine_type = \"red\")\nmut_red_wine\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\nNow combine the two datasets\n\nwine_dataset &lt;- bind_rows(mut_white_wine, mut_red_wine, .id = \"id\")\nwine_dataset\n\n# A tibble: 6,497 × 14\n   id    fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n   &lt;chr&gt;         &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1 1                 7             0.27        0.36           20.7     0.045\n 2 1                63             0.3         0.34            1.6     0.049\n 3 1                81             0.28        0.4             6.9     0.05 \n 4 1                72             0.23        0.32            8.5     0.058\n 5 1                72             0.23        0.32            8.5     0.058\n 6 1                81             0.28        0.4             6.9     0.05 \n 7 1                62             0.32        0.16            7       0.045\n 8 1                 7             0.27        0.36           20.7     0.045\n 9 1                63             0.3         0.34            1.6     0.049\n10 1                81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\nFilter combined dataset to only see high quality (&gt; 6.5) wines and wines that have an alcohol value &lt;132.\n\nwine_dataset |&gt;\n  filter(quality &gt; 6.5, alcohol &lt; 132)\n\n# A tibble: 1,206 × 14\n   id    fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n   &lt;chr&gt;         &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1 1                66             0.16        0.4             1.5     0.044\n 2 1                66             0.17        0.38            1.5     0.032\n 3 1                62             0.66        0.48            1.2     0.029\n 4 1                62             0.66        0.48            1.2     0.029\n 5 1                64             0.31        0.38            2.9     0.038\n 6 1                68             0.26        0.42            1.7     0.049\n 7 1                72             0.32        0.36            2       0.033\n 8 1                74             0.18        0.31            1.4     0.058\n 9 1                66             0.25        0.29            1.1     0.068\n10 1                62             0.16        0.33            1.1     0.057\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\nContinue to sort the rows based on quality.\n\nwine_dataset |&gt;\n  filter(quality &gt; 6.5, alcohol &lt; 132) |&gt;\n  arrange(quality)\n\n# A tibble: 1,206 × 14\n   id    fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n   &lt;chr&gt;         &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1 1                66             0.16        0.4             1.5     0.044\n 2 1                66             0.17        0.38            1.5     0.032\n 3 1                64             0.31        0.38            2.9     0.038\n 4 1                72             0.32        0.36            2       0.033\n 5 1                74             0.18        0.31            1.4     0.058\n 6 1                66             0.25        0.29            1.1     0.068\n 7 1                62             0.16        0.33            1.1     0.057\n 8 1                64             0.26        0.24            6.4     0.04 \n 9 1                71             0.18        0.36            1.4     0.043\n10 1                 7             0.32        0.34            1.3     0.042\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\nContinue the chain to only show variables acid, alcohol, type, and variable.\n\nwine_dataset |&gt;\n  filter(quality &gt; 6.5, alcohol &lt; 132) |&gt;\n  arrange(quality) |&gt;\n  select(citric_acid, alcohol, wine_type, quality)\n\n# A tibble: 1,206 × 4\n   citric_acid alcohol wine_type quality\n         &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1        0.4      124 white           7\n 2        0.38     114 white           7\n 3        0.38      11 white           7\n 4        0.36     123 white           7\n 5        0.31      10 white           7\n 6        0.29      11 white           7\n 7        0.33     109 white           7\n 8        0.24     126 white           7\n 9        0.36     127 white           7\n10        0.34      12 white           7\n# ℹ 1,196 more rows\n\n\nNow add the mean and standard deviation of the alcohol variable, grouped by quality.\n\nwine_dataset |&gt;\n  filter(quality &gt; 6.5, alcohol &lt; 132) |&gt;\n  arrange(quality) |&gt;\n  select(citric_acid, alcohol, wine_type, quality) |&gt;\n  group_by(quality) |&gt;\n  mutate(mean_alcohol = mean(alcohol)) |&gt;\n  mutate(sd_alcohol = sd(alcohol))\n\n# A tibble: 1,206 × 6\n# Groups:   quality [3]\n   citric_acid alcohol wine_type quality mean_alcohol sd_alcohol\n         &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;\n 1        0.4      124 white           7         78.7       48.9\n 2        0.38     114 white           7         78.7       48.9\n 3        0.38      11 white           7         78.7       48.9\n 4        0.36     123 white           7         78.7       48.9\n 5        0.31      10 white           7         78.7       48.9\n 6        0.29      11 white           7         78.7       48.9\n 7        0.33     109 white           7         78.7       48.9\n 8        0.24     126 white           7         78.7       48.9\n 9        0.36     127 white           7         78.7       48.9\n10        0.34      12 white           7         78.7       48.9\n# ℹ 1,196 more rows"
  },
  {
    "objectID": "ST558_HW3.html#task-3---database-practice",
    "href": "ST558_HW3.html#task-3---database-practice",
    "title": "ST558_HW3_Importing_Data",
    "section": "Task 3 - Database Practice",
    "text": "Task 3 - Database Practice\nFirst, invoke the RSQLite package for this session.\n\nlibrary(RSQLite)\n\nThen, connect to the lahman database.\n\ncon &lt;- dbConnect(RSQLite::SQLite(), \"./lahman.db\")\n\nLook at the tables in the database.\n\ndbListTables(con)\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\n\nNow let’s get all data from the ‘Teams’ table in the year 2015.\n\nlibrary(dplyr)\ntbl(con, \"Teams\") |&gt;\n  filter(yearID == 2015)\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.45.2 [/Users/charleslane/hello/ST558_HW3/lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\nPerform the same activity using SQL statements w/in the tbl function.\n\ntbl(con, sql(\n  \"SELECT `Teams`.*\n  FROM `Teams`\n  WHERE (`yearID` = 2015.0)\"\n))\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.45.2 [/Users/charleslane/hello/ST558_HW3/lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\n\nTask 3.1 - Hall of Fame Data Organization\n\nHOF_Players &lt;- tbl(con, \"HallOfFame\") |&gt;\n  filter(inducted == \"Y\", category == \"Player\") |&gt;\n  select(playerID, yearID, category) |&gt;\n  collect()\nHOF_Players\n\n# A tibble: 270 × 3\n   playerID  yearID category\n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;   \n 1 cobbty01    1936 Player  \n 2 ruthba01    1936 Player  \n 3 wagneho01   1936 Player  \n 4 mathech01   1936 Player  \n 5 johnswa01   1936 Player  \n 6 lajoina01   1937 Player  \n 7 speaktr01   1937 Player  \n 8 youngcy01   1937 Player  \n 9 alexape01   1938 Player  \n10 sislege01   1939 Player  \n# ℹ 260 more rows\n\n\nCombine the table above with first and last names from the People table.\n\ninner_join(tbl(con, \"HallOfFame\") |&gt;\n             filter(inducted == \"Y\", category == \"Player\") |&gt;\n             select(playerID, yearID, category),\n           tbl(con, \"People\") |&gt;\n             select(playerID, nameFirst, nameLast),\n           by = join_by(playerID == playerID)) |&gt;\n  collect()\n\n# A tibble: 270 × 5\n   playerID  yearID category nameFirst nameLast \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;    \n 1 cobbty01    1936 Player   Ty        Cobb     \n 2 ruthba01    1936 Player   Babe      Ruth     \n 3 wagneho01   1936 Player   Honus     Wagner   \n 4 mathech01   1936 Player   Christy   Mathewson\n 5 johnswa01   1936 Player   Walter    Johnson  \n 6 lajoina01   1937 Player   Nap       Lajoie   \n 7 speaktr01   1937 Player   Tris      Speaker  \n 8 youngcy01   1937 Player   Cy        Young    \n 9 alexape01   1938 Player   Pete      Alexander\n10 sislege01   1939 Player   George    Sisler   \n# ℹ 260 more rows\n\n\n\n\nTask 3.2 - Hall of Fame Managers’ Win Percentage\nGenerate a dataset of the Hall of Fame managers and their win/loss records.\n\ntbl(con, \"Managers\") |&gt;\n  select(playerID, G, W, L) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm = TRUE),\n            Total_W = sum(W, na.rm = TRUE),\n            Total_L = sum(L, na.rm = TRUE)) |&gt;\n  collect() |&gt;\n  mutate(Win_Loss_Pc = Total_W/G_managed) |&gt;\n  arrange(desc(Win_Loss_Pc)) |&gt;\n  collect()\n\n# A tibble: 749 × 5\n   playerID  G_managed Total_W Total_L Win_Loss_Pc\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;       &lt;dbl&gt;\n 1 bensove01         1       1       0           1\n 2 burwebi01         1       1       0           1\n 3 cohenan01         1       1       0           1\n 4 ebeldi99          3       3       0           1\n 5 falkbi01          1       1       0           1\n 6 hardeme01         3       3       0           1\n 7 simmote01         1       1       0           1\n 8 steinte01         2       2       0           1\n 9 sukefcl01         2       2       0           1\n10 tamarjo01         1       1       0           1\n# ℹ 739 more rows\n\n\n\n\nTask 3.3 Determine Managers in the Hall of Fame\nDetermine people who were managers and are in the hall of fame, regardless of whether they were inducted as managers or not.\nApproach:\n\nUse the Hall of Fame table with similar transformation as above (successfully inducted into HoF) with the exception to not filter on category of ‘player’.\nInner Join the resulting HoF table with the Managers manipulated table from above (including win percentage for managers). Join on ‘playerID’.\n\nNOTE - Since the HoF table was generated with a join, and the dplyr ‘inner_join()’ function only joins 2 tables, a “nested” inner join or an inner join of ‘Managers’ and (inner join of Hall of Fame and People) will be used.\n\nThe result will be a table with 9 variables: playerID, yearID, category, nameFirst, nameLast, G_managed, Total_W, Total_L, Win_Loss_Pc.\n\n\ninner_join(tbl(con, \"Managers\") |&gt;\n             select(playerID, G, W, L) |&gt;\n             group_by(playerID) |&gt;\n             summarize(G_managed = sum(G, na.rm = TRUE),\n                       Total_W = sum(W, na.rm = TRUE),\n                       Total_L = sum(L, na.rm = TRUE)) |&gt;\n             collect() |&gt;\n             mutate(Win_Loss_Pc = Total_W/G_managed) |&gt;\n             arrange(desc(Win_Loss_Pc)),\n           inner_join(tbl(con, \"HallOfFame\") |&gt;\n                        filter(inducted == \"Y\") |&gt;\n                        select(playerID, yearID, category),\n                      tbl(con, \"People\") |&gt;\n                        select(playerID, nameFirst, nameLast),\n                      by = join_by(playerID == playerID)) |&gt;\n             collect(),\n           by = join_by(playerID == playerID))\n\n# A tibble: 97 × 9\n   playerID  G_managed Total_W Total_L Win_Loss_Pc yearID category     nameFirst\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;       &lt;dbl&gt;  &lt;int&gt; &lt;chr&gt;        &lt;chr&gt;    \n 1 simmote01         1       1       0       1       2020 Player       Ted      \n 2 wrighge01        85      59      25       0.694   1937 Pioneer/Exe… George   \n 3 spaldal01       126      78      47       0.619   1939 Pioneer/Exe… Al       \n 4 mccarjo99      3487    2125    1333       0.609   1957 Manager      Joe      \n 5 comisch01      1410     840     541       0.596   1939 Pioneer/Exe… Charlie  \n 6 southbi01      1770    1044     704       0.590   2008 Manager      Billy    \n 7 seleefr99      2180    1284     862       0.589   1999 Manager      Frank    \n 8 chancfr01      1622     946     648       0.583   1946 Player       Frank    \n 9 weaveea99      2541    1480    1060       0.582   1996 Manager      Earl     \n10 lopezal01      2425    1410    1004       0.581   1977 Manager      Al       \n# ℹ 87 more rows\n# ℹ 1 more variable: nameLast &lt;chr&gt;"
  }
]