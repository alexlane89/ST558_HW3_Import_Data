---
title: "ST558_HW3_Importing_Data"
author: "Charles Lane"
format: html
editor: visual
---

## Task 1 - Conceptual Questions

### 1 - *If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?*

  From the R Console, we use the getwd() and setwd() commands to get and set the working directory, respectively. Setting a working directory of a different folder/object with the same root path as the current directory is accomplished with:
  
'setwd("../MyData.csv")'

From the Terminal, commands of simply 'cd ..' will change the directory to a level higher. 'cd ./DIRECTORY' would move the active directory to a location within the current directory.

### 2 - *What are the major benefits of using R Projects?*

  R projects establish a self-contained organizational location. This helps sharing configuration between different parties as all folder or file references can be local.

### 3 - *What is git and what is github?*

  Git is a version control and history software which retains all versions of code and allows for review/comparison of updates to code. Git can therefore be used to collaborate as well. Several different entities may develop on a main branch of code while enabling review by all parties prior to commmitting updates.
  Github is a website or front-end environment for git, including visualization of code projects ("Repos"), and their associated components (branches, descriptive files, etc.)

### 4 - *What are the two main differences between a tibble and a data.frame?*
  A tibble's print results are more organized and display only the top rows/columns.
  Also, as stated in the notes - they do not coerce down to a vector when you subset to only one column using [

### 5 - *Rewrite the following nested function call using baseRâ€™s chaining operator:*

```{r}
arrange(filter(select(as_tibble(iris), starts_with("Petal"), Species),
               Petal.Length < 1.55), Species)
```

```{r}
as_tibble(iris) |>
  select(starts_with("Petal"), Species) |>
  filter(Petal.Length < 1.55) |>
  arrange(by_group = Species) |>
  collect()
```


### 6 - *What is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?*

Wide format data is generally used more often for presentation and includes multiple observations in one row. Long format limits the data table to one row per observation. While wide format may be easier to consume visually, statistical analysis is more easily performed on long format because it requires less manipulation of data to separate observations.

## Task 2 - Reading Delimited Data

### Task 2.1 - Glass Data

First, need to activate the necessary packages for this session.

```{r}
library(tidyverse)
library(readr)
```

Read-in data using the 'readr' package from tidyverse.

```{r}
#reading in data
glass_data <- read_csv(
  "./glass.data",
  col_names = c("ID","RI", "Na", "Mg", "Al", "Si",
                "K", "Ca", "Ba", "Fe", "Type_of_glass"),
  show_col_types = TRUE)
glass_data
```

Now update "Type_of_glass" variable to be a string with descriptive values in place of values of 1-7.
```{r}
glass_data |>
  mutate(
    Type_of_glass = ifelse(
      Type_of_glass == 1,"building_windows_float_processed",
        ifelse(
          Type_of_glass == 2, "building_windows_non_float_processed",
            ifelse(
              Type_of_glass == 3, "vehicle_windows_float_processed",
                ifelse(
                  Type_of_glass == 4,
                    "vehicle_windows_non_float_processed",
                    ifelse(
                      Type_of_glass == 5, "containers",
                        ifelse(
                          Type_of_glass == 6, "tableware",
                            ifelse(
                              Type_of_glass == 7, "headlamps", "ERROR")
                            )
                        )
                    )
                )
            )
          )
      )
```

The preceding chain only updated the 'Type_of_glass' values, but the chain can be extended to include filtering and selection.
```{r}
glass_data |>
  mutate(
    Type_of_glass = ifelse(
      Type_of_glass == 1,"building_windows_float_processed",
        ifelse(
          Type_of_glass == 2, "building_windows_non_float_processed",
            ifelse(
              Type_of_glass == 3, "vehicle_windows_float_processed",
                ifelse(
                  Type_of_glass == 4,
                    "vehicle_windows_non_float_processed",
                    ifelse(
                      Type_of_glass == 5, "containers",
                        ifelse(
                          Type_of_glass == 6, "tableware",
                            ifelse(
                              Type_of_glass == 7, "headlamps", "ERROR")
                            )
                        )
                    )
                )
            )
          )
      ) |>
  filter(
    Fe < 0.2,
    Type_of_glass == "tableware" | Type_of_glass == "headlamps")
```

### Task 2.2 - Yeast Data

Pull in the yeast data
```{r}
yeast_data <- read_fwf(
  "./yeast.data",
  col_positions = fwf_widths(c(12, 6, 6, 6, 6, 6, 6, 6, 6, 3),
                             c("seq_name","mcg", "gvh", "alm", "mit",
                               "erl", "pox", "vac", "nuc", "class")),
  show_col_types = TRUE)
yeast_data
```

Start a chain removing the 'seq_name' and 'nuc' columns.
```{r}
yeast_data |>
  select(-seq_name & -nuc)
```

Continue the chain to determine mean and median for all numeric variables, grouped by 'class'.
```{r}
yeast_data |>
  select(-seq_name & -nuc) |>
  group_by(class) |>
  mutate(across(where(is.numeric), list(mean = mean, median = median), .names = "{.col}_{.fn}"))
```

### Task 2.3 - Combining Excel and Delimited Data

Read in data from the white wine excel spreadsheet. First activate the 'readxl' package for this session.
```{r}
library("readxl")
```

Then, read in the excel sheet from the RProject session folder via the 'readxl' package.
```{r}
white_wine <- read_excel(
  "./white-wine.xlsx",
  sheet = "white-wine",
  col_names = TRUE
)
white_wine
```

Rename the column names (i.e. remove spaces) by using the variables names from the second excel sheet.
```{r}
ww_col_names <- data.frame(
  read_excel(
    "./white-wine.xlsx",
    sheet = "variables",
    col_names = TRUE
  )
)
ww_col_names
```

Overwrite the existing column names with the 'ww_col_names' tibble from the excel sheet.
```{r}
colnames(white_wine) <- ww_col_names[[1]]
white_wine
```

Add a column indicating that these observations are associated with white wines.
```{r}
mut_white_wine <- white_wine |>
  mutate(wine_type = "white")
mut_white_wine
```

Pull in the red wine data by using readr package. First enable the package.
```{r}
library(readr)
```

Then pull in the data from a .csv file.
```{r}
red_wine <- read_delim(
  "./red-wine.csv",
  delim = ";",
  show_col_types = TRUE
)
red_wine
```

Update the column names to be the same as those for the white wines.
```{r}
colnames(red_wine) <- ww_col_names[[1]]
red_wine
```

Add a column indicating that these observations are associated with white wines.
```{r}
mut_red_wine <- red_wine |>
  mutate(wine_type = "red")
mut_red_wine
```

Now combine the two datasets
```{r}
wine_dataset <- bind_rows(mut_white_wine, mut_red_wine, .id = "id")
wine_dataset
```

Filter combined dataset to only see high quality (> 6.5) wines and wines that have an alcohol value <132.
```{r}
wine_dataset |>
  filter(quality > 6.5, alcohol < 132)
```

Continue to sort the rows based on quality.
```{r}
wine_dataset |>
  filter(quality > 6.5, alcohol < 132) |>
  arrange(quality)
```

Continue the chain to only show variables acid, alcohol, type, and variable.
```{r}
wine_dataset |>
  filter(quality > 6.5, alcohol < 132) |>
  arrange(quality) |>
  select(citric_acid, alcohol, wine_type, quality)
```

Now add the mean and standard deviation of the alcohol variable, grouped by quality.
```{r}
wine_dataset |>
  filter(quality > 6.5, alcohol < 132) |>
  arrange(quality) |>
  select(citric_acid, alcohol, wine_type, quality) |>
  group_by(quality) |>
  mutate(mean_alcohol = mean(alcohol)) |>
  mutate(sd_alcohol = sd(alcohol))
```

## Task 3 - Database Practice

First, invoke the RSQLite package for this session.
```{r}
library(RSQLite)
```

Then, connect to the lahman database.
```{r}
con <- dbConnect(RSQLite::SQLite(), "./lahman.db")
```

Look at the tables in the database.
```{r}
dbListTables(con)
```

Now let's get all data from the 'Teams' table in the year 2015.
```{r}
library(dplyr)
tbl(con, "Teams") |>
  filter(yearID == 2015)
```

Perform the same activity using SQL statements w/in the tbl function.
```{r}
tbl(con, sql(
  "SELECT `Teams`.*
  FROM `Teams`
  WHERE (`yearID` = 2015.0)"
))
```

### Task 3.1 - Hall of Fame Data Organization

```{r}
HOF_Players <- tbl(con, "HallOfFame") |>
  filter(inducted == "Y", category == "Player") |>
  select(playerID, yearID, category) |>
  collect()
HOF_Players
```

Combine the table above with first and last names from the People table.
```{r}
inner_join(tbl(con, "HallOfFame") |>
             filter(inducted == "Y", category == "Player") |>
             select(playerID, yearID, category),
           tbl(con, "People") |>
             select(playerID, nameFirst, nameLast),
           by = join_by(playerID == playerID)) |>
  collect()
```

### Task 3.2 - Hall of Fame Managers' Win Percentage

Generate a dataset of the Hall of Fame managers and their win/loss records.
```{r}
tbl(con, "Managers") |>
  select(playerID, G, W, L) |>
  group_by(playerID) |>
  summarize(G_managed = sum(G, na.rm = TRUE),
            Total_W = sum(W, na.rm = TRUE),
            Total_L = sum(L, na.rm = TRUE)) |>
  collect() |>
  mutate(Win_Loss_Pc = Total_W/G_managed) |>
  arrange(desc(Win_Loss_Pc)) |>
  collect()
```

### Task 3.3 Determine Managers in the Hall of Fame

Determine people who were managers and are in the hall of fame, regardless of whether they were inducted as managers or not.

**Approach:**
1) Use the Hall of Fame table with similar transformation as above (successfully inducted into HoF) with the exception to *not* filter on category of 'player'.

2) Inner Join the resulting HoF table with the Managers manipulated table from above (including win percentage for managers). Join on 'playerID'.

**NOTE** - Since the HoF table was generated with a join, and the dplyr 'inner_join()' function only joins 2 tables, a "nested" inner join or an inner join of 'Managers' and (inner join of Hall of Fame and People) will be used.

3) The result will be a table with 9 variables: playerID, yearID, category, nameFirst, nameLast, G_managed, Total_W, Total_L, Win_Loss_Pc.

```{r}
inner_join(tbl(con, "Managers") |>
             select(playerID, G, W, L) |>
             group_by(playerID) |>
             summarize(G_managed = sum(G, na.rm = TRUE),
                       Total_W = sum(W, na.rm = TRUE),
                       Total_L = sum(L, na.rm = TRUE)) |>
             collect() |>
             mutate(Win_Loss_Pc = Total_W/G_managed) |>
             arrange(desc(Win_Loss_Pc)),
           inner_join(tbl(con, "HallOfFame") |>
                        filter(inducted == "Y") |>
                        select(playerID, yearID, category),
                      tbl(con, "People") |>
                        select(playerID, nameFirst, nameLast),
                      by = join_by(playerID == playerID)) |>
             collect(),
           by = join_by(playerID == playerID))
```

